@startuml
 class DockingStation {
        - counter: int
        - id: int
        - dockingStationLocation: double[]
        - stationType: String
        - slots: ParkingSlot[]
        - terminal: Terminal
        - onService: boolean
        - dockingStations: ArrayList<DockingStation>
        - renting: int
        - dropping: int

        + rentBike(): Bicycle
        + parkBike(bicycle: Bicycle)
        + findOccupiedParkingSlot(): ParkingSlot
        + oneFree(): boolean
        + oneBike(bicycleType: String): boolean
        + getBikesNumber(bicycleType: String): int
        + getFreeSlotsNumber(): int
        + getDockingStationFromLocation(location: double[]): DockingStation
        + getDockingStations(): ArrayList<DockingStation>
    }

class ParkingSlot {
     - counter: int
     - ParkingSlotId: int
     - bicycle: Bicycle
     - free: boolean
     - outOfOrder: boolean
}

class Bicycle {
    - bicycleId: int
    - bicycleLocation: (double, double)
    - status: String
    - bicycleType: String
    + Bicycle()
}

class MechanicalBicycle extends Bicycle {
    + getHourlyRate()
}

class ElectricalBicycle extends Bicycle {
+ getHourlyRate()
}

class User {
    - name: String
    - userLocation: (double, double)
    - registrationCard: RegistrationCard
    - creditCardNumber: String
}

class CreditCard {
    - number: String
    - expirationDate: Date
}

class RegistrationCard {
    - CardType: String
    - timeCreditEarned: int
    + getCardType()
}

class Terminal {
    + ParkBicycle()
    + RentBicycle()
    + calculateCost()
}

class Planner {
-startLocation: double[]
-endLocation: double[]
-bicycleType: String
-PlanningPolicy: policy
+optimalItinerary()
}

interface PlanningPolicy {
        +optimalItinerary(startLocation: double[], endLocation: double[], bicycleType: String): double[][]
        +distance(point1: double[], point2: double[]): double
}

class PreferPlus implements PlanningPolicy {
        + optimalItinerary(startLocation: double[],
        endLocation: double[],
        bicycleType: String): double[][]
}

class PreferStreetBike implements PlanningPolicy {
        + optimalItinerary(startLocation: double[],
        endLocation: double[],
        bicycleType: String): double[][]
    }


class Normal implements PlanningPolicy {
        + optimalItinerary(startLocation: double[],
        endLocation: double[],
        bicycleType: String): double[][]
    }

interface BicycleVisitor {
        + visit(bicycle: MechanicalBicycle): void
        + visit(bicycle: ElectricalBicycle): void
    }

interface SortingPolicy {
+sortDockingStations()
}


Planner --> PlanningPolicy
DockingStation --> ParkingSlot
DockingStation --> Terminal
ParkingSlot --> Bicycle
User --> CreditCard
User --> RegistrationCard
@enduml